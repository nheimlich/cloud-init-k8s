#cloud-config
package_update: false
package_upgrade: false

write_files:
  - path: /usr/local/bin/setup.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      set -x
      export DEBIAN_FRONTEND=noninteractive

      apt-get update && apt-get install -y ca-certificates curl gnupg apt-transport-https
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc
      
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
      
      apt-get update && apt-get install containerd.io kubelet kubeadm kubectl -y 
      apt-mark hold kubelet kubeadm kubectl

      modprobe overlay
      modprobe br_netfilter
      sysctl --system
      sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

      echo "configuring containerd"
      test -d /etc/containerd || mkdir -p /etc/containerd
      rm -f /etc/containerd/config.toml
      containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml

      crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock
      systemctl restart containerd

      case $(hostname -s) in
        *-0*) /usr/local/bin/kubeadm-0.sh;;
        *-[1-2]*) /usr/local/bin/kubeadm-ctr.sh;;
        *-[3-5]*) /usr/local/bin/kubeadm-wrk.sh;;
        *) echo "done";;
      esac

  - path: /usr/local/bin/kubeadm-0.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      set -x
      apt-get install busybox -y
      mkdir -p /var/k8s/

      kubeadm init --upload-certs --skip-phases=addon/kube-proxy --apiserver-cert-extra-sans $(mdata-get tag).svc.$(mdata-get account).us-central-1.triton.zone --control-plane-endpoint $(mdata-get tag).svc.$(mdata-get account).us-central-1.cns.mnx.io

      echo $(kubeadm token create --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | grep -vw -e certificate -e Namespace) > /var/k8s/join-ctr.sh
      echo $(kubeadm token create --print-join-command) > /var/k8s/join-wrk.sh

      export KUBECONFIG=/etc/kubernetes/admin.conf
      echo "export KUBECONFIG=/etc/kubernetes/admin.conf" | tee -a /root/.bashrc

      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/standard/gateway.networking.k8s.io_gatewayclasses.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/standard/gateway.networking.k8s.io_gateways.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/standard/gateway.networking.k8s.io_httproutes.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/standard/gateway.networking.k8s.io_referencegrants.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/standard/gateway.networking.k8s.io_grpcroutes.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.1.0/config/crd/experimental/gateway.networking.k8s.io_tlsroutes.yaml

      CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
      CLI_ARCH=amd64

      curl -LO --fail https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz
      tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin

      cilium install -f /root/cilium-config

      busybox httpd -p 8000 -h /var/k8s/

      while [[ $(kubectl get nodes --no-headers | wc -l) -lt 6 ]]; do sleep 5; done

      pkill -f busybox
      
      # wait for nodes to register with default "control-plane" labels
      sleep 15

      kubectl label $(kubectl get nodes --no-headers --selector node-role.kubernetes.io/control-plane!="" -oname) node-role.kubernetes.io/data-plane=""

  - path: /usr/local/bin/kubeadm-ctr.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      set -x

      kubeadm config images pull --kubernetes-version v1.29.7

      export ACCT=$(mdata-get account)
      export SRC=$(hostname -s | sed -e 's/[12345]/0/g').inst.$ACCT.us-central-1.cns.mnx.io

      while [[ "$(curl -k -s -o /dev/null -w ''%{http_code}'' http://$SRC:8000/join-ctr.sh)" != "200" ]]; do sleep 5; done

      curl -s http://$SRC:8000/join-ctr.sh | bash

  - path: /usr/local/bin/kubeadm-wrk.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      set -x
      
      kubeadm config images pull --kubernetes-version v1.29.7

      export ACCT=$(mdata-get account)
      export SRC=$(hostname -s | sed -e 's/[12345]/0/g').inst.$ACCT.us-central-1.cns.mnx.io

      while [[ "$(curl -k -s -o /dev/null -w ''%{http_code}'' http://$SRC:8000/join-wrk.sh)" != "200" ]]; do sleep 5; done

      curl -s http://$SRC:8000/join-wrk.sh | bash

  - path: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

  - path: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1

  # https://github.com/cilium/cilium/issues/34028 (ingress on 80/443 technically supported but needs improvements)
  - path: /root/cilium-config
    content: |
      hubble:
        relay:
          enabled: true
        ui:
          enabled: true
      gatewayAPI:
        enabled: true
        hostNetwork:
          enabled: true
      envoy:
        securityContext:
          privileged: true
          capabilities:
            keepCapNetBindService: true
      securityContext:
        privileged: true
        capabilities:
          ciliumAgent:
          - NET_BIND_SERVICE

runcmd:
  - /usr/local/bin/setup.sh
